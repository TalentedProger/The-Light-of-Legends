from aiogram import F,Router
from aiogram.types import Message,CallbackQuery,InputFile
from aiogram.types.input_file import FSInputFile
from aiogram.filters import CommandStart,Command
from aiogram.enums import ParseMode
from aiogram.types import InputMediaPhoto,InputMediaDocument
import app.keyboards as kb
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from pathlib import Path
from quizes.quiz_kb import *
from quizes.quiz_logic import *
from library.library_kb import *
from library.library_list import FAIRY_DATA
from proverbs.proverbs_service import *
from proverbs.proverbs_state import ProverbStates
from legends.legends_service import *
from legends.legends_state import LegendState
from songs import songs_logic as logic

import galery.logic as gal_logic
import myths.logic as myths_logic


from learn_words.study_mode_kb import *
from learn_words.user_storage import get_user, update_user, delete_user
from learn_words.formatting import format_study_mode_status



router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    photo = FSInputFile("assets/images/welcome2.jpg")
    # –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Ñ–æ—Ç–æ
    await message.answer_photo(
        photo=photo,
        caption=(
            f"<b>{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º—É–∑–µ–π –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è ¬´–°–≤–µ—Ç –ª–µ–≥–µ–Ω–¥¬ª üíö</b>\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫–∞–∑–∫–∏, –º–∏—Ñ—ã, –ª–µ–≥–µ–Ω–¥—ã, –ø–æ—Å–ª–æ–≤–∏—Ü—ã –∏ –Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–µ—Å–Ω–∏ –∞–¥—ã–≥—Å–∫–æ–≥–æ –Ω–∞—Ä–æ–¥–∞. –ú—ã —Å–æ–±—Ä–∞–ª–∏ –¥–ª—è —Ç–µ–±—è —á–∞—Å—Ç–∏—Ü—ã –±–æ–≥–∞—Ç–æ–π –∫—É–ª—å—Ç—É—Ä—ã –ê–¥—ã–≥–µ–∏, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –µ—ë —Ç—Ä–∞–¥–∏—Ü–∏—è—Ö –∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è—Ö ‚ú®\n\n"
            "–ü–æ–≥—Ä—É–∑–∏—Å—å –≤ –º–∏—Ä —Å–∫–∞–∑–æ–∫ –∏ –ª–µ–≥–µ–Ω–¥ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üí´"
        ),
        parse_mode=ParseMode.HTML,
        reply_markup=kb.main
    )


# —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∏–∑–∞
class QuizStates(StatesGroup):
    selecting_difficulty = State()
    in_quiz = State()
    finished = State()

@router.message(F.text == "–ö–≤–µ—Å—Ç üèÜ")
async def start_quiz_entry(message: Message, state: FSMContext):
    await message.delete()
    await message.answer(
        "üß† –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é, –ª–æ–≥–∏–∫—É –∏ –∑–Ω–∞–Ω–∏—è –≤ –∫–æ—Ä–æ—Ç–∫–æ–º, –Ω–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º –∫–≤–∏–∑–µ!\n\n"
        "üåü <b>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å ?</b>",
        reply_markup=start_quiz_kb(),
        parse_mode=ParseMode.HTML
    )


@router.callback_query(F.data == "quiz_yes")
async def select_difficulty(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "<b>–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É :</b>\n\n"
        # "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:\n\n"
        "‚≠ê <b>–ú–∏—Ä –ê–¥—ã–≥–æ–≤</b>\n"
        "‚≠ê <b>–ö—É–ª—å—Ç—É—Ä–∞ –ê–¥—ã–≥–æ–≤</b>\n",
        reply_markup=difficulty_kb(),
        parse_mode="HTML"
    )
    await callback.answer("–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è ‚öôÔ∏è", show_alert=False)
    await state.set_state(QuizStates.selecting_difficulty)
     


@router.callback_query(F.data == "quiz_no")
async def cancel_quiz(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer("–í—ã—Ö–æ–¥ –∏–∑ –∫–≤–∏–∑–∞ üõë", show_alert=False)


@router.callback_query(F.data.startswith("diff_"))
async def difficulty_chosen(callback: CallbackQuery, state: FSMContext):
    difficulty = callback.data.split("_")[1]
    # await state.update_data(difficulty=difficulty, current_q=0, score=0)
    await state.update_data(difficulty=difficulty, current_q=0, score=0, answers=[])


    await callback.message.edit_text(
        f"<b>üìú –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∞–¥—ã–≥—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã, –≤–∫–ª—é—á–∞—è –º–∏—Ñ–æ–ª–æ–≥–∏—é, –ª–µ–≥–µ–Ω–¥—ã –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏.</b>\n\n"
        "‚ùî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞.\n\n"
        "‚è©Ô∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–µ—Ä–Ω—ã–π ‚Äî –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –¥–∞–ª—å—à–µ.\n\n"
        "‚è≥ –ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ!\n",
        reply_markup=start_or_exit_kb(),
        parse_mode="HTML"
    )
    await callback.answer(f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {difficulty.upper()} üéÆ", show_alert=False)



@router.callback_query(F.data == "start_quiz")
async def start_quiz(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    difficulty = data["difficulty"]
    question, keyboard = get_question(difficulty, 0)
    await callback.message.edit_text(question, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer("–í–ø–µ—Ä—ë–¥! –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å üß†", show_alert=False)
    await state.set_state(QuizStates.in_quiz)

# @router.callback_query(F.data.startswith("ans_"))
# async def process_answer(callback: CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     difficulty = data["difficulty"]
#     q_index = data["current_q"]
#     correct = check_answer(difficulty, q_index, callback.data.split("_")[1])
    
#     if correct:
#         data["score"] += 1
#         await callback.answer("‚úÖ –í–µ—Ä–Ω–æ!", show_alert=False)
#     else:
#         await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ!", show_alert=False)

#     data["current_q"] += 1

#     if data["current_q"] >= get_total_questions(difficulty):
#         result_text, final_kb = get_result_summary(difficulty, data["score"])
#         await callback.message.edit_text(result_text, reply_markup=final_kb, parse_mode="HTML")
#         await state.set_state(QuizStates.finished)
#     else:
#         await state.update_data(current_q=data["current_q"], score=data["score"])
#         question, keyboard = get_question(difficulty, data["current_q"])
#         await callback.message.edit_text(question, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.startswith("ans_"))
async def process_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    difficulty = data["difficulty"]
    q_index = data["current_q"]
    selected = callback.data.split("_")[1]

    is_correct = check_answer(difficulty, q_index, selected)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answers = data.get("answers", [])
    answers.append(is_correct)

    if is_correct:
        data["score"] += 1
        await callback.answer("‚úÖ –í–µ—Ä–Ω–æ!", show_alert=False)
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ!", show_alert=False)

    data["current_q"] += 1

    if data["current_q"] >= get_total_questions(difficulty):
        result_text, final_kb = get_result_summary(difficulty, answers)
        await callback.message.edit_text(result_text, reply_markup=final_kb, parse_mode="HTML")
        await state.set_state(QuizStates.finished)
    else:
        await state.update_data(current_q=data["current_q"], score=data["score"], answers=answers)
        question, keyboard = get_question(difficulty, data["current_q"])
        await callback.message.edit_text(question, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "change_mode")
async def change_mode(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "<b>üîÑ –°–º–µ–Ω–∏–º —Ç–µ–º—É: </b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º:",
        reply_markup=difficulty_kb(),
        parse_mode="HTML"
    )
    await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å üéö", show_alert=False)
    await state.set_state(QuizStates.selecting_difficulty)

@router.callback_query(F.data == "restart_quiz")
async def restart_quiz(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # await state.update_data(current_q=0, score=0)
    await state.update_data(current_q=0, score=0, answers=[])

    question, keyboard = get_question(data["difficulty"], 0)
    await callback.message.edit_text(question, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer("–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ üîÑ", show_alert=False)
    await state.set_state(QuizStates.in_quiz)

@router.callback_query(F.data == "exit")
async def exit_quiz(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer("–í—ã—Ö–æ–¥ –∏–∑ –∫–≤–∏–∑–∞ üëã", show_alert=False)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
@router.message(F.text == "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ üìö")
async def open_library_menu(message: Message):
    await message.delete()
    await message.answer(
        "<b>üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Å–∫–∞–∑–∫—É!</b>",
        reply_markup=get_library_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("fairy_"))
async def open_format_menu(callback: CallbackQuery):
    fairy_id = callback.data.split("_")[1]
    await callback.message.edit_text(
        "<b>üì• –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b>",
        reply_markup=get_format_keyboard(fairy_id),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "back_to_library")
async def back_to_library(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Å–∫–∞–∑–∫—É!</b>",
        reply_markup=get_library_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "close_library")
async def close_library(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ", show_alert=False)

@router.callback_query(F.data.startswith("mp3_"))
async def send_mp3(callback: CallbackQuery):
    fairy_id = callback.data.split("_")[1]
    fairy = FAIRY_DATA.get(fairy_id)

    if not fairy:
        return await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–∫–∞–∑–∫–∞ ‚ùå", show_alert=True)

    file_path = f"assets/mp3/{fairy['mp3']}"
    try:
        await callback.answer("üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ...", show_alert=False)
        audio = FSInputFile(file_path)
        await callback.answer()
        await callback.message.answer_audio(
            audio=audio,
            caption=f"\n\nüéß <b>{fairy['title']}</b>\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤–∞–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è üíö",
            parse_mode="HTML"
        )
        await callback.answer("–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ...", show_alert=False)
    except FileNotFoundError:
        await callback.answer("–§–∞–π–ª MP3 –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå", show_alert=True)


@router.callback_query(F.data.startswith("pdf_"))
async def send_pdf(callback: CallbackQuery):
    fairy_id = callback.data.split("_")[1]
    fairy = FAIRY_DATA.get(fairy_id)

    if not fairy:
        return await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–∫–∞–∑–∫–∞ ‚ùå", show_alert=True)

    file_path = f"assets/pdf/{fairy['pdf']}"
    try:
        await callback.answer("üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...", show_alert=False)
        pdf = FSInputFile(file_path)
        await callback.answer()
        await callback.message.answer_document(
            document=pdf,
            caption=f"\n\nüìÑ <b>{fairy['title']}</b>\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤–∞–º —á—Ç–µ–Ω–∏—è üíö",
            parse_mode="HTML"
        )
    except FileNotFoundError:
        await callback.answer("–§–∞–π–ª PDF –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå", show_alert=True)


@router.message(F.text == "–ü–æ—Å–ª–æ–≤–∏—Ü—ã üìù")
async def send_random_proverb(message: Message, state: FSMContext):
    await state.set_state(ProverbStates.viewing)
    sent_ids = set()
    await state.update_data(sent_ids=sent_ids)

    img_id = get_random_image_id(exclude_list=sent_ids)
    sent_ids.add(img_id)
    await state.update_data(sent_ids=sent_ids)

    img_path = get_image_path(img_id)
    caption = f"<b>üíö –ê–¥—ã–≥—Å–∫–∏–µ –ø–æ—Å–ª–æ–≤–∏—Ü—ã</b>"
    await message.delete()
    await message.answer_photo(
        photo=FSInputFile(img_path),
        caption=caption,
        reply_markup=kb.get_proverbs_keyboard(img_id),parse_mode=ParseMode.HTML
    )


@router.callback_query(F.data == "next_proverb")
async def next_proverb(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    sent_ids = data.get("sent_ids", set())

    current_img_id = callback.message.reply_markup.inline_keyboard[1][0].callback_data.split(":")[1]
    sent_ids.add(current_img_id)

    available_ids = set(get_all_image_ids()) - sent_ids
    if not available_ids:
        await callback.answer("–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –ø–æ—Å–ª–æ–≤–∏—Ü—ã üôå", show_alert=True)
        return

    new_img_id = random.choice(list(available_ids))
    sent_ids.add(new_img_id)
    await state.update_data(sent_ids=sent_ids)

    img_path = get_image_path(new_img_id)
    caption = "<b>–ê–¥—ã–≥—Å–∫–∏–µ –ø–æ—Å–ª–æ–≤–∏—Ü—ã üíö</b>"

    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(img_path),
            caption=caption,
            parse_mode=ParseMode.HTML  # ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ InputMediaPhoto
        ),
        reply_markup=kb.get_proverbs_keyboard(new_img_id)
    )
    await callback.answer("–í–æ—Ç –Ω–æ–≤–∞—è –ø–æ—Å–ª–æ–≤–∏—Ü–∞ ‚ú®")

@router.callback_query(F.data.startswith("copy_proverb:"))
async def copy_proverb_text(callback: CallbackQuery):
    img_id = callback.data.split(":")[1]
    text = get_text_for_image(img_id)

    await callback.message.edit_caption(
        caption=f"<b>–°–∫–æ–ø–∏—Ä—É–π –ø–æ—Å–ª–æ–≤–∏—Ü—É üëá</b>\n\n<code><b>{text}</b></code>",
        parse_mode="HTML",
        reply_markup=kb.get_proverbs_keyboard(img_id)
    )
    await callback.answer("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ‚úÇÔ∏è")




@router.callback_query(F.data == "exit_proverb_mode")
async def exit_proverb(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
    await callback.answer("–†–µ–∂–∏–º –ø–æ—Å–ª–æ–≤–∏—Ü –∑–∞–∫—Ä—ã—Ç ‚úÖ")

#–õ–µ–≥–µ–Ω–¥—ã
@router.message(F.text == "–õ–µ–≥–µ–Ω–¥—ã ‚öúÔ∏è")
async def show_first_legend(message: Message, state: FSMContext):
    await message.delete()
    await state.set_state(LegendState.viewing)
    shown = set()
    legend_id = get_random_legend_id()
    shown.add(legend_id)
    await state.update_data(shown=shown, current=legend_id)

    title = get_title(legend_id)
    caption = f"<b>{title}</b> ‚ú®"
    await message.answer_document(
        document=FSInputFile(get_pdf_path(legend_id)),
        caption=caption,
        reply_markup=kb.get_legend_keyboard(legend_id),parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data == "legend_next")
async def next_legend(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    shown = data.get("shown", set())

    try:
        legend_id = get_random_legend_id(exclude=shown)
    except ValueError:
        await callback.answer("–í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –ª–µ–≥–µ–Ω–¥—ã ‚ú®", show_alert=True)
        return

    shown.add(legend_id)
    await state.update_data(shown=shown, current=legend_id)

    caption = f"<b>{get_title(legend_id)} ‚ú®</b>"

    await callback.answer("–í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –ª–µ–≥–µ–Ω–¥—É ‚ú®")
    await callback.message.edit_media(
        media=InputMediaDocument(
            media=FSInputFile(get_pdf_path(legend_id)),
            caption=caption,
            parse_mode=ParseMode.HTML  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ
        ),
        reply_markup=kb.get_legend_keyboard(legend_id)
    )
    


@router.callback_query(F.data.startswith("legend_info:"))
async def show_legend_description(callback: CallbackQuery, state: FSMContext):
    legend_id = callback.data.split(":")[1]
    text = f"<b>{get_title(legend_id)}</b>\n\n{get_description(legend_id)}"
    await callback.message.edit_caption(caption=text, reply_markup=kb.get_legend_keyboard(legend_id),parse_mode=ParseMode.HTML)
    await callback.answer("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ üìñ")

@router.callback_query(F.data == "legend_exit")
async def exit_legend(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
    await callback.answer("–†–µ–∂–∏–º –ª–µ–≥–µ–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ")


#–æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
@router.message(F.text == "–ü–µ—Å–Ω–∏ üé∂")
async def start_songs(message: Message, state: FSMContext):
    await message.delete()
    await state.update_data(sent_songs=set())
    await send_new_song(message, state)

@router.callback_query(F.data == "next_song")
async def next_song(callback: CallbackQuery, state: FSMContext):
    await send_new_song(callback.message, state)
    await callback.answer("–í–æ—Ç –Ω–æ–≤–∞—è –ø–µ—Å–Ω—è üé∂")

@router.callback_query(F.data == "exit_song_mode")
async def exit_song_mode(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ä–µ–∂–∏–º –ø–µ—Å–µ–Ω üëã", show_alert=False)

# üîÅ –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Å–Ω–∏
async def send_new_song(message_or_cbmsg, state: FSMContext):
    data = await state.get_data()
    sent = set(data.get("sent_songs", []))

    try:
        song = logic.get_random_song(sent)
    except ValueError:
        await message_or_cbmsg.answer("–í—ã –ø—Ä–æ—Å–ª—É—à–∞–ª–∏ –≤—Å–µ –ø–µ—Å–Ω–∏ üôå")
        return

    audio = FSInputFile(logic.get_song_path(song))
    description = logic.get_song_description(song)

    await message_or_cbmsg.answer_audio(
        audio=audio,
        caption=f"\n\n\n<b>–ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä –∞–¥—ã–≥—Å–∫–æ–π –º—É–∑—ã–∫–∏ –∏ –ø—Ä–æ–Ω–∏–∫–Ω–∏—Ç–µ—Å—å –∫–∞–∂–¥–æ–π –Ω–æ—Ç–æ–π üíö</b>",
        # caption=f"\n\n<b>{description} üíö</b>",
        parse_mode="HTML",
        reply_markup=kb.get_song_keyboard()
    )

    sent.add(song)
    await state.update_data(sent_songs=sent)

# router.include_router(galery_router)

#–ì–ê–õ–ï–†–ï–Ø 
@router.message(F.text == "–ì–∞–ª–µ—Ä–µ—è üì∏")
async def start_gallery(message: Message, state: FSMContext):
    index = 0
    item = gal_logic.get_gallery_item(index)
    if not item:
        await message.answer("–ì–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞ üò¢")
        return
    
    await message.delete()
    await state.update_data(gallery_index=index)

    await message.answer_photo(
        photo=FSInputFile(gal_logic.get_image_path(item['filename'])),
        caption=(
            "–ì–∞–ª–µ—Ä–µ—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ üíö\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {item['title']}\n"
            f"<b>–ê–≤—Ç–æ—Ä:</b> {item['author']}"
        ),
        reply_markup=kb.get_gallery_keyboard(index),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("gallery_next"))
async def next_picture(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    index = data.get("gallery_index", 0) + 1

    if index >= gal_logic.total_items():
        await callback.answer("–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω—ã üñº", show_alert=True)
        return

    item = gal_logic.get_gallery_item(index)
    await state.update_data(gallery_index=index)

    await callback.message.edit_media(
        media={
            "type": "photo",
            "media": FSInputFile(gal_logic.get_image_path(item["filename"])),
            "caption": (
                "–ì–∞–ª–µ—Ä–µ—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ üíö\n\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {item['title']}\n"
                f"<b>–ê–≤—Ç–æ—Ä:</b> {item['author']}"
            )
        },
        reply_markup=kb.get_gallery_keyboard(index),
        parse_mode="HTML"
    )
    await callback.answer("–ù–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ üé®")


@router.callback_query(F.data == "gallery_exit")
async def exit_gallery(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
    await callback.answer("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –≥–∞–ª–µ—Ä–µ—é üåô")


#–ú–ò–§–´–´–´–´–´–´–´–´
@router.message(F.text == "–ú–∏—Ñ—ã üîÆ")
async def start_myths(message: Message, state: FSMContext):
    index = 0
    item = myths_logic.get_myths_item(index)
    if not item:
        await message.answer("–ì–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞ üò¢")
        return
    await message.delete()
    await state.update_data(myths_index=index)

    await message.answer_photo(
        photo=FSInputFile(myths_logic.get_image_path(item['filename'])),
        caption=(
            "–ì–∞–ª–µ—Ä–µ—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π –∞–¥—ã–≥—Å–∫–∏—Ö –º–∏—Ñ–æ–≤ üíö\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {item['title']}\n"
        ),
        reply_markup=kb.get_myths_keyboard(index),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("myths_next"))
async def next_picture(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    index = data.get("myths_index", 0) + 1

    if index >= myths_logic.total_items():
        await callback.answer("–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω—ã üñº", show_alert=True)
        return

    item = myths_logic.get_myths_item(index)
    await state.update_data(myths_index=index)

    await callback.message.edit_media(
        media={
            "type": "photo",
            "media": FSInputFile(myths_logic.get_image_path(item["filename"])),
            "caption": (
                "–ì–∞–ª–µ—Ä–µ—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ üíö\n\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {item['title']}\n"
            )
        },
        reply_markup=kb.get_myths_keyboard(index),
        parse_mode="HTML"
    )
    await callback.answer("–ù–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ üé®")


@router.callback_query(F.data == "myths_exit")
async def exit_myths(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
    await callback.answer("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ä–∞–∑–¥–µ–ª –º–∏—Ñ–æ–≤ üåô")



    #–∏–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ 

@router.message(F.text == "–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ üìñ")
async def start_study_mode(msg: Message):
    user = get_user(msg.from_user.id)
    if user.get("study_mode"):
        await msg.answer(
            format_study_mode_status(user['day'], user['time']),
            reply_markup=mode_already_enabled_kb(),
            parse_mode=ParseMode.HTML
        )
    else:
        await msg.answer(
            "<b>üìñ –†–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤</b>\n\n"
            "–•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å üìö <b>—Ä–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤</b>?\n\n"
            "–ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã ‚Äî –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ üïí.",
            reply_markup=stage_one_kb(),
            parse_mode=ParseMode.HTML
        )


@router.callback_query(F.data == "to_stage_2")
async def choose_day(call: CallbackQuery):
    await call.message.edit_text(
        "üìÜ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤:",
        reply_markup=day_selection_kb(),
        parse_mode=ParseMode.HTML
    )
    await call.answer("–í—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ –∏–∑—É—á–µ–Ω–∏—é –Ω–æ–≤—ã—Ö —Å–ª–æ–≤! üìò")


@router.callback_query(F.data.startswith("day_"))
async def save_day(call: CallbackQuery):
    day = call.data.split("_")[1]
    update_user(call.from_user.id, {"day": day})
    await call.message.edit_reply_markup(reply_markup=day_selection_kb(selected_day=day))
    await call.answer("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤—ã–±—Ä–∞–Ω! ‚úÖ")


@router.callback_query(F.data == "to_stage_3")
async def choose_time(call: CallbackQuery):
    await call.message.edit_text(
        "üïí <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤:",
        reply_markup=time_selection_kb(),
        parse_mode=ParseMode.HTML
    )
    await call.answer("–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ ‚è≥")


@router.callback_query(F.data.startswith("time_"))
async def save_time(call: CallbackQuery):
    time = call.data.split("_")[1]
    update_user(call.from_user.id, {"time": time})
    await call.message.edit_reply_markup(reply_markup=time_selection_kb(selected_time=time))
    await call.answer("–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! ‚è∞")


@router.callback_query(F.data == "to_stage_4")
async def confirm_setup(call: CallbackQuery):
    update_user(call.from_user.id, {"study_mode": True})
    user = get_user(call.from_user.id)
    await call.message.edit_text(
        f"‚úÖ <b>–†–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á—ë–Ω!</b>\n\n"
        f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ <b>–∫–∞–∂–¥—ã–π {user['day']} –≤ {user['time']}</b>. üì¨",
        reply_markup=final_stage_kb(),
        parse_mode=ParseMode.HTML
    )
    await call.answer("–ì–æ—Ç–æ–≤–æ! –ù–∞—á–Ω—ë–º –∏–∑—É—á–∞—Ç—å üí°")


@router.callback_query(F.data == "restart_setup")
async def restart(call: CallbackQuery):
    await call.message.edit_text(
        "<b>üìñ –†–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤</b>\n\n"
        "–•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å üìö <b>—Ä–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤</b>?\n\n"
        "–ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã ‚Äî –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ üïí.",
        reply_markup=stage_one_kb(),
        parse_mode=ParseMode.HTML
    )
    await call.answer("–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ üîÑ")


@router.callback_query(F.data == "disable_mode")
async def disable(call: CallbackQuery):
    update_user(call.from_user.id, {"study_mode": False})
    await call.answer("–†–µ–∂–∏–º –æ—Ç–∫–ª—é—á—ë–Ω ‚ùå", show_alert=True)
    await call.message.delete()


@router.callback_query(F.data == "exit_mode")
async def just_exit(call: CallbackQuery):
    await call.message.delete()
    await call.answer("–ó–∞–∫—Ä—ã—Ç–æ üëå", show_alert=False)