from aiogram.types import ReplyKeyboardMarkup,KeyboardButton,InlineKeyboardMarkup,InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder,InlineKeyboardBuilder

main = ReplyKeyboardMarkup(keyboard=[
	[KeyboardButton(text='–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ üìö')],
	[KeyboardButton(text='–ü–æ—Å–ª–æ–≤–∏—Ü—ã üìù'),KeyboardButton(text='–ü–µ—Å–Ω–∏ üé∂')],
	[KeyboardButton(text='–õ–µ–≥–µ–Ω–¥—ã ‚öúÔ∏è'),KeyboardButton(text='–ú–∏—Ñ—ã üîÆ')],
    [KeyboardButton(text='–ì–∞–ª–µ—Ä–µ—è üì∏'),KeyboardButton(text='–ö–≤–µ—Å—Ç üèÜ')],
    [KeyboardButton(text='–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ üìñ')],
	
],resize_keyboard=True,input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é")

start_quiz_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–î–∞, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å ‚úÖ", callback_data="start_rules")],
    [InlineKeyboardButton(text="–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚ùå", callback_data="cancel")]
])

rules_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å ‚ñ∂Ô∏è", callback_data="begin_quiz")]
])


def get_proverbs_keyboard(img_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚è©Ô∏è", callback_data="next_proverb")],
        [InlineKeyboardButton(text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å üìù", callback_data=f"copy_proverb:{img_id}")],
        [InlineKeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ ‚ùå", callback_data="exit_proverb_mode")]
    ])


def get_legend_keyboard(legend_id: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ üìù", callback_data=f"legend_info:{legend_id}")],
        [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚è©Ô∏è", callback_data="legend_next")],
        [InlineKeyboardButton(text="–í—ã–π—Ç–∏ ‚ùå", callback_data="legend_exit")]
    ])

def get_song_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –ø–µ—Å–Ω—è ‚ñ∂Ô∏è", callback_data="next_song")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å ‚ùå", callback_data="exit_song_mode")]
    ])


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤
def get_main_word_keyboard(is_active: bool):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è" if is_active else "üîî –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º",
                callback_data="word_toggle"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é",
                callback_data="word_close_menu"
            )
        ]
    ])
    return keyboard

def get_time_picker_keyboard():
    times = ["09:00", "12:00", "15:00", "18:00", "21:00"]
    rows = [[InlineKeyboardButton(text=t, callback_data=f"word_set_time:{t}")] for t in times]
    rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="word_cancel")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def get_gallery_keyboard(index: int):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏", callback_data="gallery_exit"),
        InlineKeyboardButton(text="üñº –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"gallery_next:{index}")
    )
    return builder.as_markup()

def get_myths_keyboard(index: int):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏", callback_data="myths_exit"),
        InlineKeyboardButton(text="üñº –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"myths_next:{index}")
    )
    return builder.as_markup()